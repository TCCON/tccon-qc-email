"""
Django settings for carbackend project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from enum import Enum
import json
from pathlib import Path
from socket import gethostname
from warnings import warn

# Check whether running on parkfalls.gps.caltech.edu or tccondata.gps.caltech.edu.
# The former runs the site status page; the latter the site metadata page.
# Some of the configuration will need to be host dependent
class Vms(Enum):
    UNKNOWN = 0
    PARKFALLS = 1
    TCCONDATA = 2

_hostname = gethostname()
if _hostname.startswith('parkfalls'):
    VM = Vms.PARKFALLS
elif _hostname.startswith('tccondata'):
    VM = Vms.TCCONDATA
else:
    warn('Could not detect which VM running on')
    VM = Vms.UNKNOWN



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

if VM == Vms.TCCONDATA:
    # I had lots of trouble redirecting to a subserver with nginx
    # If I just had nginx pass everything under /metadata to Django,
    # the URLs Django got didn't match what it was expecting.
    # Rewriting the URLs in Django fixed that, but then some links in
    # the Django pages wouldn't be prefixed with /metadata - this fixes
    # that.
    FORCE_SCRIPT_NAME = '/metadata'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'c=7zkf@c#(8ffy_8blas$frx*f53uqrv$hlsq$%2%2&19wsqyw'
if VM == Vms.PARKFALLS:
    with open('/var/www/car/info/key.txt') as f:
        SECRET_KEY = f.read().strip()
elif VM == Vms.TCCONDATA:
    with open('/etc/siteinfo-portal/key.txt') as f:
        SECRET_KEY = f.read().strip()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['parkfalls.gps.caltech.edu', '131.215.65.68']


# Enable/disable parts of the application depending on which VM
# we're running on
ENABLE_SITE_STATUS = True
ENABLE_SITE_METADATA = True

if VM == Vms.PARKFALLS:
    ENABLE_SITE_METADATA = False
elif VM == Vms.TCCONDATA:
    ENABLE_SITE_STATUS = False


# Application definition

INSTALLED_APPS = []

if ENABLE_SITE_STATUS:
    INSTALLED_APPS.append('opstat.apps.OpstatConfig')
if ENABLE_SITE_METADATA:
    INSTALLED_APPS.append('siteinfo.apps.SiteinfoConfig')

INSTALLED_APPS.extend([
    'tcconauth.apps.TcconAuthConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
])

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'carbackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'carbackend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

if VM == Vms.PARKFALLS:
    _db_file = '/var/www/car/info/maria.cnf'
elif VM == Vms.TCCONDATA:
    _db_file = '/etc/siteinfo-portal/maria.cnf'
else:
    _db_file = str(BASE_DIR / 'maria.cnf')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': _db_file,
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

if VM == Vms.PARKFALLS:
    STATIC_URL = '/carstatic/'
    STATIC_ROOT = '/var/www/car/static/'

    DEFAULT_FROM_EMAIL = 'sitestatus@parkfalls.gps.caltech.edu'
    SERVER_EMAIL = 'sitestatusadmin@parkfalls.gps.caltech.edu'
    

elif VM == Vms.TCCONDATA:
    STATIC_URL = '/djstatic/'
    STATIC_ROOT = '/var/www/siteinfo-portal/static'

    DEFAULT_FROM_EMAIL = 'siteinfo@tccondata.gps.caltech.edu'
    SERVER_EMAIL = 'siteinfoadmin@tccondata.gps.caltech.edu'
else:
    STATIC_URL = '/static/'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gps.caltech.edu'
EMAIL_PORT = 25
EMAIL_HOST_USER = None
EMAIL_HOST_PASSWORD = None
EMAIL_USE_TLS = None
EMAIL_USE_SSL = None
EMAIL_SSL_KEYFILE = None
EMAIL_TIMEOUT = None

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/var/www/car/cache/',
    }
}

CSRF_COOKIE_SECURE = True  # set to False if HTTPS not enabled and need to test login
SESSION_COOKIE_SECURE = True  # set to False if HTTPS not enabled and need to test login
# This makes sure the password reset goes to the right place and the login page as well
if VM == Vms.PARKFALLS:
    LOGIN_URL = '/car/accounts/login/'
    LOGIN_REDIRECT_URL = '/car/opstat/'
elif VM == Vms.TCCONDATA:
    LOGIN_URL = '/metadata/accounts/login/'
    LOGIN_REDIRECT_URL = '/metadata/siteinfo/'

if VM == Vms.TCCONDATA:
    # This is the path to the .json file that has the TCCON site metadata (like release lag, citation, etc)
    # The directory it is in needs to be writable by the Django process so that backups of this file can be
    # made
    SITE_INFO_FILE = Path('/var/www/tccon-metadata/site_info.json')

    # This is the path to the .json file that has the list of time periods flagged during QA/QC. Like the
    # site info file, its directory needs to be writable to the Django process.
    RELEASE_FLAGS_FILE = Path('/var/www/tccon-metadata/release_flags.json')

    # This is the path to the .json file that maps numeric flag values for the release/manual flags to their
    # reasons. This way `write_netcdf` and the portal are guaranteed to use the same mapping. It does not 
    # need to be in a writable location, only readable.
    RELEASE_FLAGS_DEF_FILE = Path('/var/www/tccon-metadata/release_flag_definitions.json')

    # This is the path to a .json file that specifies certain configuration elements that we might want to
    # change without having to reload the Django process, such as the point of contact and the maximum release
    # lag.
    RUNTIME_SETTINGS_FILE = BASE_DIR / 'metadata_config.json'

    # This is where plots uploaded to support the release flag decisions will be save. It must be writable to
    # the Django process. 
    FLAG_PLOT_DIRECTORY = Path('/data/tccon/release_flags_uploaded_plots')

    # This is the URL where the plots uploaded for the release flags will be served from. It should have a leading
    # and trailing slash. Like STATIC_URL and STATIC_ROOT, you will need to set up the Internet-facing web server 
    # to alias this path to FLAG_PLOT_DIRECTORY.
    FLAG_PLOT_URL = '/rflagplots/'
else:
    SITE_INFO_FILE = BASE_DIR / 'site_info.json'
    RELEASE_FLAGS_FILE = BASE_DIR / 'release_flags.json'
    RELEASE_FLAGS_DEF_FILE = BASE_DIR / 'release_flag_definitions.json'
    RUNTIME_SETTINGS_FILE = BASE_DIR / 'metadata_config.json'
    FLAG_PLOT_DIRECTORY = None
    FLAG_PLOT_URL = None
